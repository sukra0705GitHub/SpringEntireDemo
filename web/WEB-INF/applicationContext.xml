<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd
       http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
       http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan base-package="Implement,Utils,Controller,SpringConfigFile,JavaCodeConfigureSample"/>

    <!-- Enable Spring MVC -->
    <!-- 1.11.4. Validation: By default, if Bean Validation is present on the classpath (for example, Hibernate Validator), the LocalValidatorFactoryBean is registered as a global Validator for use with @Valid and Validated on controller method arguments. -->
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
        <!--
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper" ref="objectMapper"/>
            </bean>
            <bean class="org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter">
                <property name="objectMapper" ref="xmlMapper"/>
            </bean>
        </mvc:message-converters>
        -->
    </mvc:annotation-driven>

    <context:property-placeholder location="classpath:Config/config.properties"/>
    <aop:config proxy-target-class="true"></aop:config>


    <!--
        <bean id="objectMapper" class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"
              p:indentOutput="true" p:simpleDateFormat="yyyy-MM-dd" p:modulesToInstall="com.fasterxml.jackson.module.paramnames.ParameterNamesModule"/>
        <bean id="xmlMapper" parent="objectMapper" p:createXmlMapper="true"/>
    -->

    <mvc:view-resolvers>
        <!--<mvc:content-negotiation>
            <mvc:default-views>
                <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
            </mvc:default-views>
        </mvc:content-negotiation>-->
        <mvc:freemarker cache-views="false"/>
    </mvc:view-resolvers>

    <!-- Configure FreeMarker... -->
    <mvc:freemarker-configurer>
        <mvc:template-loader-path location="/WEB-INF/view/freemarker"/>
    </mvc:freemarker-configurer>
    <!--
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/freemarker/"/>
        <property name="freemarkerVariables">
            <map>
                <entry key="xml_escape" value-ref="fmXmlEscape"/>
            </map>
        </property>
    </bean>
    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>
-->

    <!-- Configure Resources -->
    <mvc:resources mapping="/resources/**" location="/resources/">
        <mvc:resource-chain resource-cache="false">
            <mvc:resolvers>
                <mvc:version-resolver>
                    <mvc:content-version-strategy patterns="/**"/>
                </mvc:version-resolver>
            </mvc:resolvers>
        </mvc:resource-chain>
    </mvc:resources>

    <!-- 1.11.11. Default Servlet -->
    <mvc:default-servlet-handler/>

    <!-- 1.11.6. Content Types: You can configure how Spring MVC determines the requested media types from the request (for example, Accept header, URL path extension, query parameter, and others).-->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes">
            <value>
                json=application/json
                xml=application/xml
            </value>
        </property>
    </bean>

    <!-- 1.11.5. Interceptors: you can register interceptors to apply to incoming requests-->
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/admin/**"/>
            <bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>
        </mvc:interceptor>
        <!--
        <mvc:interceptor>
            <mvc:mapping path="/secure/*"/>
            <bean class="org.example.SecurityInterceptor"/>
        </mvc:interceptor>
        -->
    </mvc:interceptors>

    <!-- 1.11.3. Type Conversion https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#mvc-config-enable -->
    <!--
    <bean id="conversionService"
          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="org.example.MyConverter"/>
            </set>
        </property>
        <property name="formatters">
            <set>
                <bean class="org.example.MyFormatter"/>
                <bean class="org.example.MyAnnotationFormatterFactory"/>
            </set>
        </property>
        <property name="formatterRegistrars">
            <set>
                <bean class="org.example.MyFormatterRegistrar"/>
            </set>
        </property>
    </bean>
    -->

    <!-- 国际化支持，固定写法，Spring提供的指定的Bean
        这里设值之后还需要配置国际化资源文件
    -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <!-- Spring调用messageSource对应的实体类对象的setBaseName()方法
         参数为一个数组，这里可以使用list属性配置该数组
         -->
        <property name="basenames">
            <list>
                <value>"message"</value>
                <!-- 如果有多个资源文件，可以都列在这里 -->
            </list>
        </property>
    </bean>


    <bean id="student" class="Implement.Student" lazy-init="true">
        <!-- 通过设置方法设值 需要一个空构造器-->
        <!-- 驱动Spring调用Student中的set方法，参数为ref指定的实体类对象 -->
        <!--<property name="mathBook" ref="mathBookId"/>-->

        <!-- 通过构造器设值 需要一个有一个形参为mathBook的构造器-->
        <!-- 驱动Spring调用具有一个参数的构造器，参数为ref指定的实体类对象 -->
        <constructor-arg ref="mathBookId"/>
    </bean>
    <bean id="mathBookId" class="Implement.MathBook" lazy-init="true"/>
    <bean id="applicationHolder" class="Utils.ApplicationContextHolder"/>
    <bean id="demoApplicationListener" class="Implement.DemoApplicationListener"/>


    <beans>
        <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
            <property name="driverClassName" value="${jdbc.driver}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
        </bean>
        <bean id="mySessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
            <property name="dataSource" ref="dataSource"/>
            <!--<property name="mappingResources">
                <list>
                    <value>product.hbm.xm</value>
                </list>
            </property>-->
            <!-- hibernate 映射文件  设置为自动扫描包目录-->
            <property name="packagesToScan">
                <list>
                    <value>Entity</value>
                </list>
            </property>
            <property name="hibernateProperties">
                <!--<value>
                    hibernate.dialect=${hibernate.dialect}
                </value>-->
                <props>
                    <!--hibernate根据实体自动生成数据库表-->
                    <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                    <!--指定数据库方言-->
                    <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                    <!--在控制台显示执行的数据库操作语句-->
                    <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                    <!--在控制台显示执行的数据库操作语句（格式）-->
                    <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                </props>
            </property>
        </bean>

        <!-- 事务管理器配置  -->
        <!--<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
            <property name="sessionFactory" ref="mySessionFactory" />
        </bean>-->
        <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
            <property name="entityManagerFactory" ref="mySessionFactory" />
        </bean>
        <!-- 开启事务注解-->
        <tx:annotation-driven transaction-manager="transactionManager"/>
    </beans>

</beans>